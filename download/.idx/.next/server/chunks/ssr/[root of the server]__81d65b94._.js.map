{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/suggest-due-date.ts"],"sourcesContent":["// Implemented Genkit flow for suggesting task due dates based on team workload.\n\n'use server';\n\n/**\n * @fileOverview AI-powered due date suggestion for tasks, considering team workload.\n *\n * - suggestDueDate - A function that suggests a due date for a task.\n * - SuggestDueDateInput - The input type for the suggestDueDate function.\n * - SuggestDueDateOutput - The return type for the suggestDueDate function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestDueDateInputSchema = z.object({\n  taskDescription: z.string().describe('Description of the task to be completed.'),\n  teamMembers: z\n    .array(z.object({name: z.string(), currentWorkload: z.number().min(0).max(100)}))\n    .describe('List of team members and their current workload as a percentage.'),\n  priority: z.enum(['high', 'medium', 'low']).describe('Priority of the task.'),\n});\n\nexport type SuggestDueDateInput = z.infer<typeof SuggestDueDateInputSchema>;\n\nconst SuggestDueDateOutputSchema = z.object({\n  suggestedDueDate: z.string().describe('Suggested due date for the task in ISO format (YYYY-MM-DD).'),\n  reasoning: z.string().describe('Explanation for why the suggested due date was chosen.'),\n  workloadAllocation: z\n    .array(z.object({name: z.string(), projectedWorkload: z.number().min(0).max(100)}))\n    .describe('Projected workload for each team member after task assignment.'),\n});\n\nexport type SuggestDueDateOutput = z.infer<typeof SuggestDueDateOutputSchema>;\n\nexport async function suggestDueDate(input: SuggestDueDateInput): Promise<SuggestDueDateOutput> {\n  return suggestDueDateFlow(input);\n}\n\nconst suggestDueDatePrompt = ai.definePrompt({\n  name: 'suggestDueDatePrompt',\n  input: {schema: SuggestDueDateInputSchema},\n  output: {schema: SuggestDueDateOutputSchema},\n  prompt: `You are an AI assistant helping project managers determine the best due date for new tasks.\n\n  Consider the following factors when suggesting a due date:\n  - Task description: {{{taskDescription}}}\n  - Team members and their current workload:\n  {{#each teamMembers}}\n  - Name: {{{name}}}, Workload: {{{currentWorkload}}}%\n  {{/each}}\n  - Priority: {{{priority}}}\n\n  Suggest a due date that avoids overburdening team members while ensuring timely task completion.\n  Provide a clear reasoning for your suggestion, and the workload allocation for each team member after assigning the task.\n  The current date is {{now format='YYYY-MM-DD'}}.\n  Output the suggested due date in ISO format (YYYY-MM-DD).\n  Ensure that all projected workload are between 0 and 100.\n  Always respond in JSON format.\n  `,\n});\n\nconst suggestDueDateFlow = ai.defineFlow(\n  {\n    name: 'suggestDueDateFlow',\n    inputSchema: SuggestDueDateInputSchema,\n    outputSchema: SuggestDueDateOutputSchema,\n  },\n  async input => {\n    const {output} = await suggestDueDatePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gFAAgF;;;;;;AAIhF;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAI,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAAI,IAC7E,QAAQ,CAAC;IACZ,UAAU,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAM,EAAE,QAAQ,CAAC;AACvD;AAIA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,oBAAoB,uIAAA,CAAA,IAAC,CAClB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAI,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAAI,IAC/E,QAAQ,CAAC;AACd;AAIO,eAAe,uCAAY,GAAZ,eAAe,KAA0B;IAC7D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;;EAgBT,CAAC;AACH;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,qBAAqB;IAC5C,OAAO;AACT;;;IApCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/shared/PageHeader.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\n\ninterface PageHeaderProps {\n  title: string;\n  description?: string;\n  actions?: ReactNode;\n}\n\nexport function PageHeader({ title, description, actions }: PageHeaderProps) {\n  return (\n    <div className=\"mb-6 md:flex md:items-center md:justify-between\">\n      <div className=\"min-w-0 flex-1\">\n        <h1 className=\"text-2xl font-bold leading-tight text-foreground sm:text-3xl sm:truncate\">\n          {title}\n        </h1>\n        {description && (\n          <p className=\"mt-1 text-sm text-muted-foreground\">{description}</p>\n        )}\n      </div>\n      {actions && <div className=\"mt-4 flex md:ml-4 md:mt-0\">{actions}</div>}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAQO,SAAS,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAmB;IACzE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCACX;;;;;;oBAEF,6BACC,8OAAC;wBAAE,WAAU;kCAAsC;;;;;;;;;;;;YAGtD,yBAAW,8OAAC;gBAAI,WAAU;0BAA6B;;;;;;;;;;;;AAG9D","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/assisted-assignment/AssistedAssignmentClientPage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AssistedAssignmentClientPage = registerClientReference(\n    function() { throw new Error(\"Attempted to call AssistedAssignmentClientPage() from the server but AssistedAssignmentClientPage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/assisted-assignment/AssistedAssignmentClientPage.tsx <module evaluation>\",\n    \"AssistedAssignmentClientPage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,+BAA+B,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9D;IAAa,MAAM,IAAI,MAAM;AAAwQ,GACrS,qGACA","debugId":null}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/assisted-assignment/AssistedAssignmentClientPage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AssistedAssignmentClientPage = registerClientReference(\n    function() { throw new Error(\"Attempted to call AssistedAssignmentClientPage() from the server but AssistedAssignmentClientPage is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/assisted-assignment/AssistedAssignmentClientPage.tsx\",\n    \"AssistedAssignmentClientPage\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,+BAA+B,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9D;IAAa,MAAM,IAAI,MAAM;AAAwQ,GACrS,iFACA","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/assisted-assignment/page.tsx"],"sourcesContent":["import { PageHeader } from \"@/components/shared/PageHeader\";\nimport { AssistedAssignmentClientPage } from \"@/components/assisted-assignment/AssistedAssignmentClientPage\";\n\nexport default function AssistedAssignmentPage() {\n  return (\n    <div className=\"space-y-6\">\n      <PageHeader\n        title=\"AI Assisted Task Assignment\"\n        description=\"Leverage AI to suggest optimal due dates for tasks based on team workload and task priority.\"\n      />\n      <AssistedAssignmentClientPage />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,0IAAA,CAAA,aAAU;gBACT,OAAM;gBACN,aAAY;;;;;;0BAEd,8OAAC,4KAAA,CAAA,+BAA4B;;;;;;;;;;;AAGnC","debugId":null}}]
}